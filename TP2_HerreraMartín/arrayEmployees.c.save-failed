#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "arrayEmployees.h"
#include "utn.h"
int menu()
{
    int opcion;
    system("cls");
    printf("*********** Gestion de Empleados ***********\n");
    printf("1-Alta de empleado\n");
    printf("2-Modificacion de empleado\n");
    printf("3-Baja de empleado\n");
    printf("4-Informes\n");
    printf("5.Salir\n");
    utn_getNumero(&opcion,"Ingrese una opcion: ","Error, opcion no valida, usted tiene solos tres intentos.\n",1,5,3);
    return opcion;
}

int initEmployees(eEmployee* lista, int len)
{
    int retorno = -1;
    if(lista != NULL && len > 0)
    {
        for (int i = 0; i <  len; i++)
        {
            lista[i].isEmpty = 1;
        }
        retorno = 0;
    }

    return retorno;
}

int findEmployeeById(eEmployee* lista, int len, int id)
{
    int indice = -1;
    if(lista != NULL && len > 0)
    {
        for(int i = 0; i<len; i++)
        {
            if(lista[i].id == id && lista[i].isEmpty==0)
            {
                indice = i;
                break;
            }
        }
    }

    return indice;
}

//busca lugar libre en listado
int buscarLibre(eEmployee* lista, int len)
{
    int indice = -1;
    for(int i = 0; i < len; i++)
    {
        if(lista[i].isEmpty)
        {
            indice = i;
            break;
        }
    }
    return indice;
}

void altaEmpleado(eEmployee* lista, int len,int* proxId,int* banderaPrimerIngreso)
{
    int existe;
    int id;
    char name[51];
    char lastname[51];
    float salary;
    int sector;

    id=*proxId;

    existe = buscarLibre(lista,len);

    if(existe == -1)
    {
        printf("Sistema completo.\n");
        system("pause");
    }
    else
    {
        system("cls");
        printf("****Alta Empleado****\n\n");
        utn_getNombre(name,51,"Ingrese nombre: ","Error, solo debe digitar letras.\n",3);
        utn_getNombre(lastname,51,"Ingrese apellido: ","Error, solo debe digitar letras.\n",3);
        //El sueldo maximo sera de 1000000.
        utn_getNumeroFlotante(&salary,"Ingrese sueldo: ","Error, solo digite numeros.\n",0,1000000,3);
        utn_getNumero(&sector,"Ingrese sector del 1 al 5: ","Error, del 1 al 5.\n",1,5,3);
        if(addEmployee(lista,len,id,name,lastname,salary,sector) == -1)
        {
            printf("Error en la carga.\n");
        }
        else
        {
            (*proxId)++;
            (*banderaPrimerIngreso)=1;
            system("pause");

        }


    }


}

//Le tiene que llegar esos parametros y los tiene que meter en la indiveVacio posicion del vector lista de empleados
int addEmployee(eEmployee* lista, int len, int id, char name[],char lastname[],float salary, int sector)
{
    int retorno = -1;
    int indiceVacio;
    indiceVacio = buscarLibre(lista,len);

    if(lista != NULL && len > 0 && indiceVacio != -1)
    {

        eEmployee auxEmpleado;

        auxEmpleado.id = id;
        strcpy(auxEmpleado.name,name);
        strcpy(auxEmpleado.lastName,lastname);
        auxEmpleado.salary = salary;
        auxEmpleado.sector = sector;
        auxEmpleado.isEmpty = 0;

        lista[indiceVacio] = auxEmpleado;
        retorno = 0;
    }
    return retorno;
}



void mostrarEmpleado(eEmployee empleado)
{
    printf("%d    %10s    %10s    %.2f    %2d\n",empleado.id,empleado.name,empleado.lastName,empleado.salary,empleado.sector);
}

int printEmployees(eEmployee* lista, int length)
{
    system("cls");
    int flag = 0;
    printf("******** Listado Empleados **********\n\n");
    printf("Id          Nombre      Apellido    Sueldo      Sector\n\n");
    for(int i = 0; i<length; i++)
    {
        if(lista[i].isEmpty == 0)
        {
            mostrarEmpleado(lista[i]);
            flag = 1 ;
        }
    }
    if(flag == 0)
    {
        printf("No hay empleados que listar\n\n");
    }
    system("pause");
    return 0;
}


int removeEmployee(eEmployee* lista, int len, int id)
{
    int retorno = -1;
    int indice = -1;

    indice= findEmployeeById(lista,len,id);

    if(indice == -1)
    {
        printf("No hay registro de un empleado con el ID: %d \n",id);
        system("pause");
    }
    else
    {
        mostrarEmpleado(lista[indice]);

        lista[indice].isEmpty = 1;
        printf("Se ha realizado la baja con exito!!\n");
        retorno = 0;
        system("pause");
    }
    return retorno;
}

int subMenuOrden()
{
    system("cls");
    int opcion;

    printf("1- Listado de los empleados ordenados alfabeticamente por Apellido y Sector.\n");
    printf("2- Total y promedio de los salarios, y cuantos empleados \n");
    utn_getNumero(&opcion,"Ingrese una opcion: ","ERROR, solo esas opciones.\n",1,2,3);

    return opcion;
}
int menuOpcionOrden()
{
    system("cls");
    int opcion;

    printf("1- Orden ascendente.\n");
    printf("2- Orden descendente.\n");
    utn_getNumero(&opcion,"Ingrese una opcion: ","ERROR, solo esas opciones.\n",1,2,3);

    return opcion;
}

void informes(eEmployee* lista, int len)
{
    int opcion;
    int opcionOrden;
    opcion = subMenuOrden();
    if(opcion == 1)
    {
        opcionOrden = menuOpcionOrden();
        if(opcionOrden==1)
        {
            sortEmployees(lista,len,1);
            printEmployees(lista,len);
            system("pause");

        }
        else if (opcionOrden == 2)
        {
            sortEmployees(lista,len,0);
            printEmployees(lista,len);
            system("pause");
        }
    }
    else if(opcion == 2)
    {
        informarTotalSueldos(lista,len);
    }
}

int sortEmployees(eEmployee* lista, int len, int order)
{
    int exito = -1;
    if(lista != NULL && len > 0)
    {

        eEmployee auxEmpleado;
        if(order == 1)
        {
            for(int i = 0; i < len - 1; i++)
            {
                for(int j = i + 1; j < len; j++)
                {
                    if(lista[i].sector > lista[j].sector)
                    {
                        auxEmpleado = lista[i];
                        lista[i] = lista[j];
                        lista[j] = auxEmpleado;
                    }
                    else if (lista[i].sector == lista[j].sector && strcmp(lista[i].lastName,lista[j].lastName)>0)
                    {
                        auxEmpleado = lista[i];
                        lista[i] = lista[j];
                        lista[j] = auxEmpleado;
                    }
                }
            }
        }
        else if (order == 0)
        {
            for(int i = 0; i < len - 1; i++)
            {
                for(int j = i + 1; j < len; j++)
                {
                    if(lista[i].sector < lista[j].sector)
                    {
                        auxEmpleado = lista[i];
                        lista[i] = lista[j];
                        lista[j] = auxEmpleado;
                    }
                    else if (lista[i].sector == lista[j].sector && strcmp(lista[i].lastName,lista[j].lastName)<0)
                    {
                        auxEmpleado = lista[i];
                        lista[i] = lista[j];
                        lista[j] = auxEmpleado;
                    }
                }
            }
        }
        exito = 0;
    }

    return exito;
}

void informarTotalSueldos(eEmployee* lista, int tam)
{
    int flagIngreso = 0;
    float totalSueldos =0;
    int contadorSueldos = 0;
    float promedioSueldos;
    system("cls");
    printf("\n***** Total de Sueldos *****\n\n");
    for(int i=0; i<tam; i++)
    {
        if (lista[i].isEmpty ==0)
        {
            totalSueldos += lista[i].salary;
            contadorSueldos++;
            flagIngreso = 1;
        }

    }
    if(flagIngreso == 1)
    {
        promedioSueldos = (float)totalSueldos/contadorSueldos;
        printf("El total de los sueldos es de : %.2f\n",totalSueldos);
        printf("El promedio de los sueldos es de : %.2f\n",promedioSueldos);
        system("pause");
    }
    else
    {
        printf("Error, todavia no se ingresaron sueldos\n");
    }

}

void modificarEmpleado(eEmployee* lista, int len)
{
    int id;
    int indice = -1;
    char nuevoNombre[51];
    char nuevoApellido[51];
    float nuevoSueldo;
    int nuevoSector;

    system("cls");
    printf("***** Modificar Empleado ***** \n \n");

    //El minimo es 1000 ya que la primer menor id que puede existir es 1000, y en el maximo se pongo un numero grande que nunca se alcanzara.
    utn_getNumero(&id,"Ingrese id del empleado del cual desea realizar una modificacion: ","Error.",1000,100000,3);

    indice = findEmployeeById(lista,len,id);

    if (indice == -1)
    {
        printf("No hay registro de un empleado con el Id: %d. \n", id);
        system("pause");
    }
    else
    {
        mostrarEmpleado(lista[indice]);

        switch(subMenuModificacion())
        {
        case 1:
            if(utn_getNombre(nuevoNombre,51,"Ingrese nuevo nombre: ","Error, solo puede digitar letras.\n",3)== -1)
            {
                printf("ERROR, se acabaron los intentos.\n");
                printf("Operacion cancelada.\n");
                system("pause");
            }
            else
            {
                strcpy(lista[indice].name,nuevoNombre);
                printf("Se realizo la modificacion del nombre del empleado solicitado. \n");
                system("pause");

            }

            break;
        case 2:
            if(utn_getNombre(nuevoApellido,51,"Ingrese nuevo apellido: ","Error, solo puede digitar letras.\n",3)==-1)
            {
                printf("Error, se acabaron los intentos.\n");
                printf("Operacion cancelada.\n");
                system("pause");
            }
            else
            {
                strcpy(lista[indice].lastName,nuevoApellido);
                printf("Se realizo la modificacion del apellido del empleado solicitado. \n");
                system("pause");

            }
            break;
        case 3:
            if(utn_getNumero(&nuevoSueldo,"Ingrese nuevo sueldo: ","Error, solo puede digitar numeros",0,1000000,3)==-1)
            {
                printf("Error, se acabaron los intentos.\n");
                printf("Operacion cancelada.\n");
                system("pause");
            }
            else
            {
                lista[indice].salary = nuevoSueldo;
                printf("Se realizo la modificacion del sueldo del empleado solicitado. \n");
                system("pause");

            }
            break;
        case 4:
            if(utn_getNumero(&nuevoSector,"Ingrese nuevo sector (1 al 5): ","Error, solo debe digitar numeros del 1 al 5.\n",1,5,3)==-1)
            {
                printf("Error, se acabaron los intentos.\n");
                printf("Operacion cancelada.\n");
                system("pause");
            }
            else
            {

            }
            lista[indice].sector = nuevoSector;
            printf("Se realizo la modificacion del sueldo del empleado solicitado. \n");
            break;
        default:
            printf("Opcion incorrecta.\n");
            break;
        }
    }

}

int subMenuModificacion()
{
    int opcion;
    printf("Que desea modificar? \n");
    printf("1. Nombre.\n");
    printf("2. Apellido.\n");
    printf("3. Salario.\n");
    printf("4. Sector.\n");
    scanf("%d",&opcion);
    system("pause");
    return opcion;
}

